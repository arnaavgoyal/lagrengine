#ifndef UTILS_SHADER_H
#define UTILS_SHADER_H

#include <glad/gl.h>

using ShaderProgram = unsigned int;

static std::string *readFromFile(std::string path) {
    std::ifstream file(path);
    std::string* str = new std::string(std::istreambuf_iterator<char>(file),
            std::istreambuf_iterator<char>());

    file.close();

    return str;
}

ShaderProgram compileShaderProgram(std::string vertex_path, 
        std::string fragment_path) {
    // read the vertex file into a string
    std::ifstream file(vertex_path);
    std::string* str = new std::string(std::istreambuf_iterator<char>(file),
            std::istreambuf_iterator<char>());

    file.close();

    // create the necessary shaders
    unsigned int vertex_id = glCreateShader(GL_VERTEX_SHADER);
    unsigned int fragment_id = glCreateShader(GL_FRAGMENT_SHADER);
    int status;
    char infoLoag[512];

    glShaderSource(vertex_id, 1, vertex_str, 0);
    glCompileShader(vertex_id);
    glGetShaderiv(vertex_id, GL_COMPILE_STATUS, &status);

    if(!status) {
    }

    id = glCreateProgram();
    glAttachShader(id, vertexId);
    glAttachShader(id, fragmentId);
    glLinkProgram(id);

    // delete shaders, they are no longer needed
    glDeleteShader(vertexId);
    glDeleteShader(fragmentId);
}

struct ShaderProgram {
    // id for shader program, generated by OpenGL
    unsigned int id;

    /**
     * Initializes a basic shader program with only the vertex and fragment shaders
     * @param vertex_path the path to the vertex shader
     * @param fragment_path the path to the fragment shader
     */
    ShaderProgram(std::string vertex_path, std::string fragment_path) {
        // read in the shaders from the files
        std::string *vertex_str = readFromFile(vertex_path);
        std::string *vertex_str = readFromFile(fragment_path);

        // create the necessary shaders
        unsigned int vertex_id = glCreateShader(GL_VERTEX_SHADER);
        unsigned int fragment_id = glCreateShader(GL_FRAGMENT_SHADER);
        int status;
        char infoLoag[512];

        glShaderSource(vertex_id, 1, vertex_str, 0);
        glCompileShader(vertex_id);
        glGetShaderiv(vertex_id, GL_COMPILE_STATUS, &status);

        if(!status) {
        }

        id = glCreateProgram();
        glAttachShader(id, vertexId);
        glAttachShader(id, fragmentId);
        glLinkProgram(id);

        // delete shaders, they are no longer needed
        glDeleteShader(vertexId);
        glDeleteShader(fragmentId);
    }

    use() {
        glUseProgram(id);
    }

    destroy() {
        glDeleteProgram(id);
    }
}

#endif // UTILS_SHADER_H
